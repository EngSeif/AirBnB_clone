#!/usr/bin/python3
"""
This Module Contains :-
-   BaseModel Class Which Has
    All Attributes And Methods
    For Other Classes
"""


import datetime
import uuid
from models import storage


class BaseModel:
    """
    BaseModel Class Which Has
    All Attributes And Methods
    For Other Classes
    """

    def __init__(self, *args, **kwargs):
        """
        Default Constructor For BaseModel Class
        Attributes:
        -  id : Unique Id Generated By UUID4
        -  created_at : Datetime Object Of Time
                        When It Was Created
        -  updated_at : Datetime Object Of Time
                        When It Was Updated
        """
        if kwargs:
            if "__class__" in kwargs:
                del kwargs["__class__"]
            for key, value in kwargs.items():
                if key in ["created_at", "updated_at"]:
                    value = (
                        datetime.datetime
                        .strptime(value, "%Y-%m-%dT%H:%M:%S.%f")
                        )
                setattr(self, key, value)
        else:
            self.id = str(uuid.uuid4())
            self.created_at = datetime.datetime.now()
            self.updated_at = datetime.datetime.now()
            storage.new(self)

    def __str__(self):
        """ String Representation Of BaseModel CLass """
        return ("[{}] ({}) {}"
                .format(self.__class__.__name__, self.id, self.__dict__))

    def save(self):
        """ Login The Time Of Update """
        self.updated_at = datetime.datetime.now()
        storage.save()

    def to_dict(self):
        """ Convert The Object Attributes Into A Dictionarry"""
        Obj_Dict = self.__dict__.copy()
        Obj_Dict['__class__'] = self.__class__.__name__
        Obj_Dict['created_at'] = self.created_at.isoformat()
        Obj_Dict['updated_at'] = self.updated_at.isoformat()
        return Obj_Dict
